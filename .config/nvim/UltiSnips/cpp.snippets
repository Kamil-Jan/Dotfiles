# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet omain "main template for competitive programming (omain)"
#include <bits/stdc++.h>
using namespace std;

#define MP make_pair
#define F first
#define S second
#define PB push_back
#define B begin()
#define E end()
#define range(i, a, b) for (int i = a; i < b; ++i)
#define rep(i, b) range(i, 0, b)
#define all(v) v.B, v.E

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pi;

int main()
{
	ios_base::sync_with_stdio(0);
	cout.tie(0);
	cin.tie(0);

	${VISUAL}$0
	return 0;
}

endsnippet

snippet ogen "generator template for competitive programming (ogen)"
#include <bits/stdc++.h>
using namespace std;

#define MP make_pair
#define F first
#define S second
#define PB push_back
#define B begin()
#define E end()
#define range(i, a, b) for (int i = a; i < b; ++i)
#define rep(i, b) range(i, 0, b)
#define all(v) v.B, v.E

typedef long long ll;
typedef vector<int> vi;
typedef pair<int, int> pi;

int rand(int a, int b) { return a + rand() % (b - a + 1); }

int main(int argc, char* argv[])
{
	ios_base::sync_with_stdio(0);
	cout.tie(0);
	cin.tie(0);

	srand(*argv[1]);
	${VISUAL}$0
	return 0;
}

endsnippet
